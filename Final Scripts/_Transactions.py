import pyodbc
import csv
import time
import re

# Connect to the database (ensure ODBC connection is 32-bit)
connection = pyodbc.connect("DSN=zen32")
cursor = connection.cursor()


cursor.execute("""
 
select thRunNo,
 thAcCode,
 idxAcCode,
 thAutoNom,
 thOurRef,
 idxOurRef,
 thIdxDocCode,
 thFolio,
 idxFolio,
 thCurrency,
 thIdxYearPeriod,
 thYear,
 thPeriod,
 thDueDate,
 thIdxDueDate,
 thVATDate,
 thIdxVATDate,
 thTransDate,
 thIdxTransDate,
 idxAcType,
 thCustSupp,
 thCompanyRate_1,
 thCompanyRate_2,
 thDailyRate_1,
 thDailyRate_2,
 thIdxOLDYourRef,
 thOLDYourRef,
 thIdxBatchLink,
 thBatchLink,
 thAllocStat,
 thDocType,
 thVAT_Standard_1,
 thVAT_Standard_2,
 thVAT_Exempt_1,
 thVAT_Exempt_2,
 thVAT_Zero_1,
 thVAT_Zero_2,
 thVAT_Rate1_1,
 thVAT_Rate1_2,
 thVAT_Rate2_1,
 thVAT_Rate2_2,
 thVAT_Rate3_1,
 thVAT_Rate3_2,
 thVAT_Rate4_1,
 thVAT_Rate4_2,
 thVAT_Rate5_1,
 thVAT_Rate5_2,
 thVAT_Rate6_1,
 thVAT_Rate6_2,
 thVAT_Rate7_1,
 thVAT_Rate7_2,
 thVAT_Rate8_1,
 thVAT_Rate8_2,
 thVAT_Rate9_1,
 thVAT_Rate9_2,
 thVAT_RateT_1,
 thVAT_RateT_2,
 thVAT_RateX_1,
 thVAT_RateX_2,
 thVATRate_B_1,
 thVATRate_B_2,
 thVATRate_C_1,
 thVATRate_C_2,
 thVATRate_F_1,
 thVATRate_F_2,
 thVATRate_G_1,
 thVATRate_G_2,
 thVATRate_R_1,
 thVATRate_R_2,
 thVATRate_W_1,
 thVATRate_W_2,
 thVATRate_Y_1,
 thVATRate_Y_2,
 thNetValue_1,
 thNetValue_2,
 thTotalVAT_1,
 thTotalVAT_2,
 thSettlePerc_1,
 thSettlePerc_2,
 thTotSettleDisc_1,
 thTotSettleDisc_2,
 thTotLineDisc_1,
 thTotLineDisc_2,
 thDiscDays,
 thDiscTaken,
 thSettled_1,
 thSettled_2,
 thAutoIncUnit,
 thAutoYear,
 thAutoPeriod,
 thSSDTransNat,
 thSSDTransMode,
 thRemitRef,
 thAutoUnits,
 thHold,
 thTotalWeight_1,
 thTotalWeight_2,
 thDelAddr1,
 thDelAddr2,
 thDelAddr3,
 thDelAddr4,
 thDelAddr5,
 thCurrVar_1,
 thCurrVar_2,
 thTotal1_1,
 thTotal1_2,
 thTotal2_1,
 thTotal2_2,
 thTotalCost_1,
 thTotalCost_2,
 thTotalInvoiced_1,
 thTotalInvoiced_2,
 thIdxYourRefLong,
 thYourRefLong,
 thAutoUntil,
 thNomVATIO,
 thExternal,
 thPrinted,
 thCurrVariance_1,
 thCurrVariance_2,
 thAmtSettled_1,
 thAmtSettled_2,
 thSettledVAT_1,
 thSettledVAT_2,
 thVATClaimed_1,
 thVATClaimed_2,
 thBatchPayGL,
 thAutoPost,
 thManualVAT,
 thSSDDelTerms,
 thOnPickRun,
 thUser,
 thNoLabels,
 thTagged,
 thPickRunNo,
 thOrderMatch,
 thDelivNote,
 thVATCompRate_1,
 thVATCompRate_2,
 thVATDailyRate_1,
 thVATDailyRate_2,
 thOrigCompRate_1,
 thOrigCompRate_2,
 thOrigDailyRate_1,
 thOrigDailyRate_2,
 thPostDiscAmt,
 thPostDiscTaken,
 thDrCrGL,
 thJobCode,
 thJobAnal,
 thOutstOrder_1,
 thOutstOrder_2,
 thSpare2,
 thUser1,
 thUser2,
 thLineType1,
 thLineType2,
 thLineType3,
 thLineType4,
 thLineType5,
 thLineType6,
 thDebtChaseNo,
 thBatOwnSettl,
 thBatPaySettl,
 thBatUntagged,
 thUser3,
 thUser4,
 thProcess,
 thSource,
 thMainTriRate,
 thMainTriEuro,
 thMainTriInvert,
 thMainTriFloat,
 thMainTriSpare,
 thVATTriRate,
 thVATTriEuro,
 thVATTriInvert,
 thVATTriFloat,
 thVATTriSpare,
 thOrigTriRate,
 thOrigTriEuro,
 thOrigTriInvert,
 thOrigTriFloat,
 thOrigTriSpare,
 thPreEuroTriRate,
 thPreEuroTriEuro,
 thPreEuroTriInvert,
 thPreEuroTriFloat,
 thPreEuroTriSpare,
 thPostDate,
 thPORPickSOR,
 thBatchDiscAmount,
 thPrePost,
 thAuthorisedAmount,
 thTimeChanged,
 thTimeCreated,
 thCISTaxDue,
 thCISTaxDeclared,
 thCISManualTax,
 thCISDate,
 thTotalCostApport,
 thCISEmployee,
 thCISTotalGross,
 thCISSource,
 thExported,
 thCISGrossExclude,
 thWeekMonth,
 thWorkflowState,
 thOverrideLocation,
 thSpare7,
 thYourRef,
 thIdxYourRef,
 thUser5,
 thUser6,
 thUser7,
 thUser8,
 thUser9,
 thUser10,
 thDeliveryPostCode,
 thOriginator,
 thCreationTime,
 thCreationDate,
 thOrdPayOrderRef,
 thOrdPayElement,
 thOrdPayFlags,
 thCreditCardType,
 thCreditCardNumber,
 thCreditCardExpiry,
 thCreditCardAuthNo,
 thCreditCardRefNo,
 thCustomData1,
 thDeliveryCountry,
 thPPDPercentage,
 thPPDDays,
 thPPDGoodsValue,
 thPPDVATValue,
 thPPDTaken,
 thPPDCreditNote,
 thBatchPayPPDStatus,
 thIntrastOutOfPeriod,
 thUser11,
 thUser12,
 thTaxRegion,
 thAnonymised,
 thAnonymisedDate,
 thAnonymisedTime,
 thApplyReverseCharge,
 thSpare1,
 thSpare3 from Transactions

""")

# Fetch all results
rows = cursor.fetchall()



# Get column names from cursor description
columns = [column[0] for column in cursor.description]

# Function to clean and convert text to UTF-8
def clean_text(value):
    if isinstance(value, str):
        value = value.encode("ISO-8859-1", errors="ignore").decode("utf-8", errors="ignore")  # Convert to UTF-8
        value = re.sub(r'[\x00-\x1F\x7F]', '', value)  # Remove control characters
    return value

# Start CSV writing timer
csv_start_time = time.time()

# Write results to CSV file
csv_file = 'Transactions_Output_UTF8.csv'
with open(csv_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(columns)  # Write header row
    
    for row in rows:
        writer.writerow([clean_text(value) for value in row])  # Write cleaned data rows

